{"version":3,"sources":["FormItem.tsx"],"names":["FormItem","children","props","ref","hasError","setHasError","status","message","isRequired","value","keyboardType","inputRef","setState","validation","customValidation","containsError","focus","current","blur","clear","isFocused","getComponent","handleBlur","e","onBlur","handleFocus","onFocus","label","styles","asterik","marginLeft","undefined","labelStyle","wrapper","style","borderColor","colors","red","borderWidth","inputText","textInputStyle","autoCapitalize","maxLength","errorWrapper","exclamation","underneathText","underneathTextStyle","validateEmail","email","test","validateNumber","number","validateDecimalNumber","endsWith","validatePhoneNumber","replace","extraValidation","StyleSheet","create","flexDirection","backgroundColor","borderRadius","paddingHorizontal","minHeight","alignItems","marginBottom","flex","paddingVertical","marginTop","color","height","width","justifyContent","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef,\n  useState,\n  useImperativeHandle,\n  useRef,\n  RefObject,\n  ComponentProps,\n  ReactNode,\n} from 'react';\nimport {\n  TextInput,\n  View,\n  StyleSheet,\n  Text,\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  KeyboardTypeOptions,\n} from 'react-native';\n\nimport Label from '../components/Label';\nimport { colors } from '../colors';\n\ntype Validation = { status: boolean; message: string };\n\ninterface Props extends ComponentProps<typeof TextInput> {\n  textInputStyle?: object | object[];\n  children?: ReactNode;\n  underneathText?: string;\n  underneathTextStyle?: object | object[];\n  label?: string;\n  labelStyle?: object | object[];\n  isRequired?: boolean;\n  value: string;\n  customValidation?: () => Validation;\n  asterik?: boolean;\n  ref: RefObject<TextInput>;\n}\n\nconst FormItem = forwardRef(({ children, ...props }: Props, ref: any) => {\n  const [hasError, setHasError] = useState({ status: false, message: '' });\n  const { isRequired, value, keyboardType } = props;\n  const inputRef: any = useRef();\n\n  useImperativeHandle(ref, () => ({\n    setState: () => {\n      let validation;\n      if (props.customValidation) validation = props.customValidation();\n      setHasError(containsError(keyboardType, isRequired!, value, validation));\n    },\n    focus: () => inputRef.current.focus(),\n    blur: () => inputRef.current.blur(),\n    clear: () => inputRef.current.clear(),\n    isFocused: () => inputRef.current.isFocused(),\n    getComponent: () => 'FormItem',\n  }));\n\n  const handleBlur = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    let validation;\n    if (props.customValidation) validation = props.customValidation();\n    setHasError(containsError(keyboardType, isRequired!, value, validation));\n    if (props.onBlur) props.onBlur(e);\n  };\n\n  const handleFocus = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    setHasError({ status: false, message: '' });\n    if (props.onFocus) props.onFocus(e);\n  };\n\n  return (\n    <>\n      {props.label && (\n        <Label\n          text={props.label}\n          style={[\n            styles.label,\n            !props.asterik ? { marginLeft: 4 } : undefined,\n            props.labelStyle,\n          ]}\n          asterik={props.asterik}\n        />\n      )}\n      <View\n        style={[\n          styles.wrapper,\n          props.style,\n          hasError.status\n            ? { borderColor: colors.red, borderWidth: 1 }\n            : undefined,\n        ]}\n      >\n        {\n          // this is separated from props because adding it causes TextInput to throw an error\n          children\n        }\n        <TextInput\n          {...props}\n          style={[styles.inputText, props.textInputStyle]}\n          ref={inputRef}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          value={props.value}\n          autoCapitalize={\n            props.autoCapitalize ||\n            (props.keyboardType == 'email-address' ? 'none' : undefined)\n          }\n          maxLength={props.maxLength || 150}\n        />\n        {hasError.status && (\n          <View style={styles.errorWrapper}>\n            <Text style={styles.exclamation}>{'\\u0021'}</Text>\n          </View>\n        )}\n      </View>\n\n      {hasError.status && (\n        <Text style={[styles.underneathText, props.underneathTextStyle]}>\n          {props.underneathText || hasError.message}\n        </Text>\n      )}\n    </>\n  );\n});\n\nconst validateEmail = (email: string) => {\n  return /^\\S+@\\S+\\.\\S+$/.test(email);\n};\n\nconst validateNumber = (number: string) => {\n  return /^\\d+$/.test(number);\n};\n\nconst validateDecimalNumber = (number: string) => {\n  return /^\\d+.*\\d*/.test(number) && !number.endsWith('.');\n};\n\nconst validatePhoneNumber = (number: string) =>\n  /^\\+{0,1}\\d+$/.test(number.replace(/ /g, ''));\n\nexport const containsError = (\n  keyboardType: KeyboardTypeOptions = 'default',\n  isRequired: boolean,\n  value: string,\n  extraValidation?: Validation\n) => {\n  if (extraValidation && !extraValidation.status) {\n    return {\n      status: true,\n      message: extraValidation.message,\n    };\n  } else if (extraValidation && extraValidation.status) {\n    return { status: false, message: '' };\n  }\n\n  if (keyboardType == 'email-address' && !validateEmail(value))\n    return { status: true, message: 'Enter a valid email' };\n  if (isRequired && !value) return { status: true, message: 'Cannot be empty' };\n  if (\n    keyboardType == 'number-pad' ||\n    (keyboardType == 'numeric' && !validateNumber(value))\n  )\n    return { status: true, message: 'Invalid number' };\n  if (keyboardType == 'phone-pad' && !validatePhoneNumber(value))\n    return { status: true, message: 'Invalid phone number' };\n  if (keyboardType == 'decimal-pad' && !validateDecimalNumber(value))\n    return { status: true, message: 'Invalid number' };\n\n  return { status: false, message: '' };\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    borderRadius: 5,\n    paddingHorizontal: 8,\n    minHeight: 48,\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  inputText: {\n    flex: 1,\n    paddingVertical: 8,\n  },\n  underneathText: {\n    marginTop: -24,\n    marginLeft: 8,\n    marginBottom: 24,\n    color: colors.red,\n  },\n  label: {\n    marginBottom: 2,\n  },\n  errorWrapper: {\n    height: 30,\n    width: 30,\n    borderRadius: 15,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.red,\n  },\n  exclamation: {\n    color: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n});\n\nexport default FormItem;\n"]}