{"version":3,"sources":["Form.tsx"],"names":["submitForm","Form","props","width","setWidth","opacity","setOpacity","handleButtonPress","fieldsWithError","Children","forEach","children","child","index","ref","current","getComponent","keyboardType","isRequired","value","customValidation","validation","status","push","label","placeholder","setState","length","console","error","JSON","stringify","onButtonPress","Platform","OS","keyboardVerticalOffset","undefined","styles","button","buttonStyle","color","radius","event","nativeEvent","layout","buttonText","buttonTextStyle","StyleSheet","create","height","justifyContent","alignItems","backgroundColor","colors","red","borderRadius","marginVertical","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { Children, useState, ReactNode } from 'react';\nimport {\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  Text,\n  StyleSheet,\n  TextInputSubmitEditingEventData,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport { containsError } from './FormItem';\nimport { colors } from '../colors';\n\ninterface Props {\n  children: ReactNode;\n  keyboardVerticalOffset?: number;\n  buttonText?: string;\n  buttonStyle?: object | object[];\n  buttonTextStyle?: object | object[];\n  onButtonPress: () => void;\n}\n\nexport let submitForm: (\n  e?: NativeSyntheticEvent<TextInputSubmitEditingEventData>\n) => void;\n\nexport default function Form(props: Props) {\n  const [width, setWidth] = useState(0);\n  const [opacity, setOpacity] = useState(1);\n\n  const handleButtonPress = () => {\n    const fieldsWithError: string[] = [];\n    Children.forEach(props.children, (child, index) => {\n      //@ts-ignore\n      if (child && child.ref?.current?.getComponent() == 'FormItem') {\n        const {\n          keyboardType,\n          isRequired,\n          value,\n          customValidation,\n          //@ts-ignore\n        } = child.props;\n        let validation;\n\n        if (customValidation) validation = customValidation();\n        if (containsError(keyboardType, isRequired, value, validation).status) {\n          fieldsWithError.push(\n            //@ts-ignore\n            child.props.label || child.props.placeholder || 'FormItem' + index\n          );\n          //@ts-ignore\n          child.ref?.current.setState();\n        }\n      }\n    });\n\n    if (fieldsWithError.length) {\n      console.error(\n        'The following fields do not fulfil their conditions:\\n' +\n          JSON.stringify(fieldsWithError, null, 2)\n      );\n      return;\n    }\n\n    props.onButtonPress();\n  };\n  submitForm = handleButtonPress;\n\n  return (\n    <KeyboardAvoidingView\n      keyboardVerticalOffset={\n        Platform.OS == 'ios' ? props.keyboardVerticalOffset || 50 : undefined\n      }\n      behavior={Platform.OS == 'ios' ? 'padding' : undefined}\n    >\n      {props.children}\n      <Pressable\n        style={[\n          styles.button,\n          Platform.OS == 'ios' ? { opacity } : undefined,\n          props.buttonStyle,\n        ]}\n        onPress={handleButtonPress}\n        android_ripple={{ color: 'lightgrey', radius: width }}\n        onLayout={(event) => setWidth(event.nativeEvent.layout.width)}\n        onPressIn={() => setOpacity(0.5)}\n        onPressOut={() => setOpacity(1)}\n      >\n        <Text style={[styles.buttonText, props.buttonTextStyle]}>\n          {props.buttonText || 'Submit'}\n        </Text>\n      </Pressable>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    height: 48,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.red,\n    borderRadius: 8,\n    marginVertical: 32,\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n"]}